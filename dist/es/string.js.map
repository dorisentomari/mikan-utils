{"version":3,"file":"string.js","sources":["../../../src/string.ts"],"sourcesContent":["/**\n * 首字母大写\n *\n * @param {string} word - 待处理的字符串\n * @returns {string} - 首字母大写后的字符串\n *\n * @example\n * const result = capitalize('hello');\n * console.log(result); // 输出: Hello\n */\nexport function capitalize(word: string): string {\n  if (word) {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n  }\n  return word;\n}\n\n/**\n * 裁剪字符串左侧空格\n *\n * @param {string} val - 待处理的字符串\n * @returns {string} - 左侧空格裁剪后的字符串\n *\n * @example\n * const result = trimLeft('   hello');\n * console.log(result); // 输出: 'hello'\n */\nexport function trimLeft(val: string): string {\n  return val.replace(/^\\s+/g, ''); // 使用 \\s+ 来匹配一个或多个空格\n}\n\n/**\n * 裁剪字符串右侧空格\n *\n * @param {string} val - 待处理的字符串\n * @returns {string} - 右侧空格裁剪后的字符串\n *\n * @example\n * const result = trimRight('hello   ');\n * console.log(result); // 输出: 'hello'\n */\nexport function trimRight(val: string): string {\n  return val.replace(/\\s+$/g, ''); // 使用 \\s+ 来匹配一个或多个空格\n}\n\n/**\n * 裁剪字符串两侧空格\n *\n * @param {string} val - 待处理的字符串\n * @returns {string} - 两侧空格裁剪后的字符串\n *\n * @example\n * const result = trim('   hello   ');\n * console.log(result); // 输出: 'hello'\n */\nexport function trim(val: string): string {\n  return trimLeft(trimRight(val)); // 先裁剪右侧再裁剪左侧\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;AASG;AACG,SAAU,UAAU,CAAC,IAAY,EAAA;IACrC,IAAI,IAAI,EAAE;AACR,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;KACrD;AACD,IAAA,OAAO,IAAI,CAAC;AACd,CAAC;AAED;;;;;;;;;AASG;AACG,SAAU,QAAQ,CAAC,GAAW,EAAA;IAClC,OAAO,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;AAClC,CAAC;AAED;;;;;;;;;AASG;AACG,SAAU,SAAS,CAAC,GAAW,EAAA;IACnC,OAAO,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;AAClC,CAAC;AAED;;;;;;;;;AASG;AACG,SAAU,IAAI,CAAC,GAAW,EAAA;IAC9B,OAAO,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;AAClC;;;;"}