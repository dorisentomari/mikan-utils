{"version":3,"file":"browser.js","sources":["../../../src/browser.ts"],"sourcesContent":["import { isPlainObject } from './common';\n\n/**\n * DOM 选择器\n *\n * @param {string | HTMLElement} selector - 选择器字符串，支持 ID、类名、标签名，或直接传入 HTMLElement。\n * @returns {HTMLElement | NodeList | null} 返回匹配的单个元素、NodeList 或 null。\n *\n * @example\n * ```typescript\n * const element = $selector('#app');\n * const listItems = $selector('.list-item');\n * ```\n */\nexport function $selector(selector: string | HTMLElement): HTMLElement | null | NodeListOf<Element> {\n  if (!selector) {\n    return null;\n  }\n  \n  if (isHTMLElement(selector)) {\n    return selector;\n  }\n  \n  if (selector.startsWith('#')) {\n    // @ts-ignore\n    return document.querySelector(selector);\n  } else {\n    return document.querySelectorAll(selector);\n  }\n}\n\n/**\n * 判断元素是否有某个 class\n *\n * @param {HTMLElement} elem - 要检查的 HTML 元素。\n * @param {string} className - 要检查的类名。\n * @returns {boolean} 如果元素具有指定的类名，则返回 true；否则返回 false。\n * @throws {Error} 如果未找到元素，则抛出错误。\n *\n * @example\n * ```typescript\n * const hasClass = hasClassName(element, 'active');\n * ```\n */\nexport function hasClassName(elem: HTMLElement, className: string): boolean {\n  if (!elem) {\n    throw new Error(`Cannot find ${elem} element`);\n  }\n  return elem.classList.contains(className);\n}\n\n/**\n * 给某个元素添加 class\n *\n * @param {HTMLElement} elem - 要添加类名的 HTML 元素。\n * @param {string} name - 要添加的类名。\n *\n * @example\n * ```typescript\n * addClassName(element, 'active');\n * ```\n */\nexport function addClassName(elem: HTMLElement, name: string): void {\n  if (!hasClassName(elem, name)) {\n    elem.classList.add(name);\n  }\n}\n\n/**\n * 删除某个元素的 class\n *\n * @param {HTMLElement} elem - 要删除类名的 HTML 元素。\n * @param {string} name - 要删除的类名。\n *\n * @example\n * ```typescript\n * deleteClassName(element, 'active');\n * ```\n */\nexport function deleteClassName(elem: HTMLElement, name: string): void {\n  if (hasClassName(elem, name)) {\n    elem.classList.remove(name);\n  }\n}\n\n/**\n * 替换某个元素的 class\n *\n * @param {HTMLElement} elem - 要操作的 HTML 元素。\n * @param {string} newClassName - 要添加的新类名。\n * @param {string} oldClassName - 要删除的旧类名。\n *\n * @example\n * ```typescript\n * replaceClassName(element, 'new-class', 'old-class');\n * ```\n */\nexport function replaceClassName(elem: HTMLElement, newClassName: string, oldClassName: string): void {\n  deleteClassName(elem, oldClassName);\n  addClassName(elem, newClassName);\n}\n\n/**\n * 判断是否为有效的 HTML 元素\n *\n * @param {any} dom - 要检查的对象。\n * @returns {boolean} 如果是有效的 HTML 元素，则返回 true；否则返回 false。\n *\n * @example\n * ```typescript\n * const isElem = isHTMLElement(someVar);\n * ```\n */\nexport function isHTMLElement(dom: any): dom is HTMLElement {\n  return dom instanceof HTMLElement;\n}\n\n/**\n * 判断是否为指定的 HTMLElement 标签\n *\n * @template T - 元素类型。\n * @param {any} element - 要检查的对象。\n * @param {string} tagName - 要匹配的标签名。\n * @returns {boolean} 如果元素是指定的 HTML 标签，则返回 true；否则返回 false。\n *\n * @example\n * ```typescript\n * const isDiv = isSpecificHTMLElement<HTMLDivElement>(element, 'div');\n * ```\n */\nexport function isSpecificHTMLElement<T extends HTMLElement>(element: any, tagName: string): element is T {\n  return isHTMLElement(element) && element.tagName.toLowerCase() === tagName.toLowerCase();\n}\n\n/**\n * 设置元素样式\n *\n * @param {string | HTMLElement} selector - 选择器字符串或 HTML 元素。\n * @param {Record<string, string>} [style={}] - 样式对象，格式为 { 'key': 'value' }。\n *\n * @example\n * ```typescript\n * setStyle('#app', { color: 'red', fontSize: '16px' });\n * ```\n */\nexport function setStyle(selector: string | HTMLElement, style: Record<string, string> = {}): void {\n  const dom = $selector(selector);\n  \n  if (!isHTMLElement(dom)) {\n    return;\n  }\n  \n  Object.entries(style).forEach(([key, value]) => {\n    dom.style[key as any] = value; // 使用 as any 消除类型警告\n  });\n}\n\n/**\n * 设置元素属性\n *\n * @param {string | HTMLElement} selector - 选择器字符串或 HTML 元素。\n * @param {Record<string, any>} [attributes={}] - 属性对象，格式为 { 'key': 'value' }。\n *\n * @example\n * ```typescript\n * setDomAttributes('#app', { id: 'newId', 'data-custom': 'value' });\n * ```\n */\nexport function setDomAttributes(selector: string | HTMLElement, attributes: Record<string, any> = {}): void {\n  const dom = $selector(selector);\n  \n  if (!isHTMLElement(dom)) {\n    return;\n  }\n  \n  Object.entries(attributes).forEach(([key, value]) => {\n    dom.setAttribute(key, value);\n  });\n}\n\n/**\n * 删除 DOM 元素\n *\n * @param {string | HTMLElement} selector - 选择器字符串或 HTML 元素，表示要删除的元素。\n *\n * @example\n * ```typescript\n * removeDom('#app');\n * ```\n */\nexport function removeDom(selector: string | HTMLElement): void {\n  const dom = $selector(selector);\n  \n  if (!dom) {\n    return; // 如果没有找到元素，直接返回\n  }\n  \n  // 处理 NodeList 或者单个元素\n  const elements = dom instanceof NodeList ? Array.from(dom) : [dom];\n  \n  elements.forEach((item) => {\n    if (item.parentNode) {\n      item.parentNode.removeChild(item);\n    }\n  });\n}\n\n/**\n * 创建 DOM 元素\n *\n * @param {string} elem - 要创建的元素标签名。\n * @param {Record<string, any>} [attributes={}] - 要设置的属性对象，格式为 { 'key': 'value' }。\n * @param {Record<string, string>} [style={}] - 要设置的样式对象，格式为 { 'key': 'value' }。\n * @returns {HTMLElement | null} 返回创建的元素，或 null。\n *\n * @example\n * ```typescript\n * const newElem = createElement('div', { id: 'newDiv' }, { color: 'red' });\n * ```\n */\nexport function createElement(elem: string, attributes: Record<string, any> = {}, style: Record<string, string> = {}): HTMLElement | null {\n  if (!elem) {\n    throw new Error('Element name is required');\n  }\n  \n  const dom = document.createElement(elem);\n  \n  if (isPlainObject(attributes)) {\n    setDomAttributes(dom, attributes);\n  }\n  \n  if (isPlainObject(style)) {\n    setStyle(dom, style);\n  }\n  \n  return dom;\n}\n\n/**\n * 安全获取 localStorage 中的值\n *\n * @param {string} key - 要获取的键。\n * @returns {any} 返回解析后的值，如果解析失败，则返回原始字符串。\n *\n * @example\n * ```typescript\n * const data = safeGetLocalStorage('key');\n * ```\n */\nexport function safeGetLocalStorage(key: string): any {\n  const value = localStorage.getItem(key);\n  try {\n    if (typeof value === 'string') {\n      // 先检查字符串是否符合 JSON 格式\n      return value.startsWith('{') || value.startsWith('[') ? JSON.parse(value) : value;\n    }\n    return value;\n  } catch (error) {\n    return value; // 返回原始字符串\n  }\n}\n\n/**\n * 安全设置 localStorage 的值\n *\n * @param {string} key - 要设置的键。\n * @param {any} value - 要设置的值，可以是对象、数组或原始类型。\n *\n * @example\n * ```typescript\n * safeSetLocalStorage('key', { a: 1 });\n * ```\n */\nexport function safeSetLocalStorage(key: string, value: any): void {\n  const finalValue = (Array.isArray(value) || isPlainObject(value)) ? JSON.stringify(value) : value;\n  localStorage.setItem(key, finalValue);\n}\n\n/**\n * 安全删除 localStorage 中的键\n *\n * @param {string} key - 要删除的键。\n *\n * @example\n * ```typescript\n * safeRemoveLocalStorage('key');\n * ```\n */\nexport function safeRemoveLocalStorage(key: string): void {\n  localStorage.removeItem(key);\n}\n"],"names":[],"mappings":"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"}