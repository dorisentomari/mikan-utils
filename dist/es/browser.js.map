{"version":3,"file":"browser.js","sources":["../../../src/browser.ts"],"sourcesContent":["import { isBrowser, isPlainObject } from './common';\n\n/**\n * DOM 选择器\n *\n * @param {string} selector - 选择器字符串，支持 ID、类名和标签名。\n * @returns {HTMLElement | NodeList | null} 返回匹配的单个元素、NodeList 或 null。\n */\nexport function $selector(selector: string): HTMLElement | null | NodeListOf<Element> {\n  if (!selector) {\n    return null;\n  }\n  \n  // 使用 querySelector 或 querySelectorAll\n  // @ts-ignore\n  return selector.startsWith('#')\n    ? document.querySelector(selector) // 返回单一元素\n    : document.querySelectorAll(selector); // 返回 NodeList\n}\n\n/**\n * 判断元素是否有某个 class\n *\n * @param {HTMLElement} elem - 要检查的元素。\n * @param {string} className - 要检查的类名。\n * @returns {boolean} 如果元素具有指定的类名，则返回 true；否则返回 false。\n * @throws {Error} 如果未找到元素，则抛出错误。\n */\nexport function hasClassName(elem: HTMLElement, className: string): boolean {\n  if (!elem) throw new Error(`cannot find ${elem} element`);\n  return elem.classList.contains(className);\n}\n\n/**\n * 给某个元素添加 class\n *\n * @param {HTMLElement} elem - 要添加类名的元素。\n * @param {string} name - 要添加的类名。\n */\nexport function addClassName(elem: HTMLElement, name: string): void {\n  if (!hasClassName(elem, name)) {\n    elem.classList.add(name);\n  }\n}\n\n/**\n * 删除某个元素的 class\n *\n * @param {HTMLElement} elem - 要删除类名的元素。\n * @param {string} name - 要删除的类名。\n */\nexport function deleteClassName(elem: HTMLElement, name: string): void {\n  if (hasClassName(elem, name)) {\n    elem.classList.remove(name);\n  }\n}\n\n/**\n * 替换某个元素的 class\n *\n * @param {HTMLElement} elem - 要操作的元素。\n * @param {string} newClassName - 要添加的新类名。\n * @param {string} oldClassName - 要删除的旧类名。\n */\nexport function replaceClassName(elem: HTMLElement, newClassName: string, oldClassName: string): void {\n  deleteClassName(elem, oldClassName);\n  addClassName(elem, newClassName);\n}\n\n/**\n * 判断是否有效 HTML Element\n *\n * @param {any} dom - 要检查的对象。\n * @returns {boolean} 如果是有效的 HTML Element，则返回 true；否则返回 false。\n */\nexport function isHTMLElement(dom: any): dom is HTMLElement {\n  return dom instanceof HTMLElement;\n}\n\n/**\n * 判断是否是指定的 HTMLElement\n *\n * @param {any} element - 要检查的对象。\n * @param {string} tagName - 要匹配的标签名。\n * @returns {boolean} 如果元素是指定的 HTML Element，则返回 true；否则返回 false。\n */\nexport function isSpecificHTMLElement<T extends HTMLElement>(element: any, tagName: string): element is T {\n  return isHTMLElement(element) && element.tagName.toLowerCase() === tagName.toLowerCase();\n}\n\n/**\n * 通用设置样式\n *\n * @param {string | HTMLElement} selector - 选择器字符串或 HTML 元素。\n * @param {Record<string, string>} [style={}] - 要设置的样式对象，格式为 { 'key': 'value' }。\n */\nexport function setStyle(selector: string | HTMLElement, style: Record<string, string> = {}): void {\n  if (!selector) {\n    return;\n  }\n  \n  const dom = typeof selector === 'string' ? document.querySelector(selector) : isHTMLElement(selector) ? selector : null;\n  \n  // 如果没有找到有效的 HTML 元素，则返回\n  if (!isHTMLElement(dom)) return;\n  \n  // 设置样式\n  Object.entries(style).forEach(([key, value]) => {\n    (dom.style as any)[key] = value; // 消除 TypeScript 类型警告\n  });\n}\n\n/**\n * 通过 DOM 设置样式\n *\n * @param {string} selector - 选择器字符串，选择要设置样式的元素。\n * @param {string} cssText - 要应用的 CSS 样式文本。\n */\nexport function setStyleCssText(selector: string, cssText: string): void {\n  const domList = $selector(selector);\n  if (Array.isArray(domList)) {\n    domList.forEach((domItem: HTMLElement) => {\n      domItem.style.cssText = cssText;\n    });\n  }\n}\n\n/**\n * 通用设置属性\n *\n * @param {HTMLElement} dom - 要设置属性的元素。\n * @param {Record<string, any>} [attributes={}] - 属性对象，格式为 { 'key': 'value' }。\n */\nexport function setDomAttributes(dom: HTMLElement, attributes: Record<string, any> = {}): void {\n  if (!dom) {\n    return;\n  }\n  \n  Object.entries(attributes).forEach(([key, value]) => {\n    dom.setAttribute(key, value);\n  });\n}\n\n/**\n * 删除 DOM\n *\n * @param {string} className - 选择器字符串，表示要删除的元素的类名。\n */\nexport function removeDom(className: string): void {\n  try {\n    const childDomList = document.querySelectorAll(className.trim());\n    childDomList.forEach((childDom) => {\n      if (childDom.parentNode) {\n        childDom.parentNode.removeChild(childDom);\n      }\n    });\n  } catch (e) {\n    console.log('e', e);\n  }\n}\n\n/**\n * 创建 DOM\n *\n * @param {string} elem - 要创建的元素的标签名。\n * @param {Record<string, any>} [attributes={}] - 要设置的属性对象，格式为 { 'key': 'value' }。\n * @param {Record<string, string>} [style={}] - 要设置的样式对象，格式为 { 'key': 'value' }。\n * @returns {HTMLElement | null} 返回创建的元素或 null。\n */\nexport function createElement(elem: string, attributes: Record<string, any> = {}, style: Record<string, string> = {}): HTMLElement | null {\n  if (!elem) {\n    return null;\n  }\n  \n  const dom = document.createElement(elem);\n  \n  if (isPlainObject(attributes)) {\n    setDomAttributes(dom, attributes);\n  }\n  \n  if (isPlainObject(style)) {\n    setStyle(dom, style);\n  }\n  \n  return dom;\n}\n\n/**\n * 删除 localStorage 里以某个前缀开头的数据\n *\n * @param {string} prefix - 要删除的前缀。\n */\nexport function removeLocalStorageByPrefix(prefix: string): void {\n  try {\n    if (!isBrowser()) {\n      Object.keys(localStorage)\n        .filter((key) => key.startsWith(prefix))\n        .forEach((key) => {\n          safeRemoveLocalStorage(key);\n        });\n    }\n  } catch (err) {\n    console.error(err);\n  }\n}\n\n/**\n * 安全的获取 localStorage\n *\n * @param {string} key - 要获取的键。\n * @returns {any} 返回解析后的值，如果解析失败则返回原始字符串。\n */\nexport function safeGetLocalStorage(key: string): any {\n  const value = localStorage.getItem(key) || '';\n  try {\n    return JSON.parse(value);\n  } catch (error) {\n    console.error(error);\n    return value; // 返回原始字符串\n  }\n}\n\n/**\n * 安全的设置 localStorage\n *\n * @param {string} key - 要设置的键。\n * @param {any} value - 要设置的值，可以是对象或其他类型。\n * @param {string} [removePrefix=''] - 如果设置失败，删除的前缀。\n */\nexport function safeSetLocalStorage(key: string, value: any, removePrefix: string = ''): void {\n  try {\n    const finalValue = typeof value === 'object' ? JSON.stringify(value) : value;\n    localStorage.setItem(key, finalValue);\n  } catch (error) {\n    console.error(error);\n    if (removePrefix) {\n      removeLocalStorageByPrefix(removePrefix);\n      localStorage.setItem(key, value);\n    }\n  }\n}\n\n/**\n * 安全的删除 localStorage\n *\n * @param {string} key - 要删除的键。\n */\nexport function safeRemoveLocalStorage(key: string): void {\n  try {\n    localStorage.removeItem(key);\n  } catch (error) {\n    console.error(error);\n  }\n}\n"],"names":[],"mappings":"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"}