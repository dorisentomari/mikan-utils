{"version":3,"file":"csv.js","sources":["../../../src/csv.ts"],"sourcesContent":["import { isPlainObject, isString } from './common';\n\n/**\n * 将 CSV 数据转换为 JSON 格式。\n *\n * @param {string} data - 要转换的 CSV 数据。\n * @param {string} [delimiter=','] - CSV 数据中使用的分隔符。\n * @returns {Array<Object>} - 表示 JSON 数据的对象数组。\n *\n * @example\n * const jsonData = CSVtoJSON('name,age\\nAlice,30\\nBob,25');\n * // 输出: [{ name: 'Alice', age: '30' }, { name: 'Bob', age: '25' }]\n */\nexport function CSVtoJSON(data = '', delimiter = ',') {\n  if (isString(data) && data.length > 0) {\n    const [titlesLine, ...restData] = data.split('\\n');\n    const titles = titlesLine.split(delimiter);\n    \n    return restData.map((row) => {\n      const values = row.split(delimiter);\n      return titles.reduce((obj:Record<any, any>, title, index) => {\n        obj[title] = values[index];\n        return obj;\n      }, {});\n    });\n  }\n  return [];\n}\n\n/**\n * 将对象数组转换为 CSV 格式。\n *\n * @param {Array<Object>} arr - 要转换为 CSV 的对象数组。\n * @param {Array<string>} columns - 要包含在 CSV 中的列。\n * @param {string} [delimiter=','] - 在 CSV 输出中使用的分隔符。\n * @returns {string} - 生成的 CSV 字符串。\n *\n * @throws {TypeError} - 如果数组中的任何元素不是对象，则抛出错误。\n *\n * @example\n * const csvData = JSONtoCSV([{ name: 'Alice', age: 30 }, { name: 'Bob', age: 25 }], ['name', 'age']);\n * // 输出: 'name,age\\nAlice,30\\nBob,25'\n */\nexport function JSONtoCSV(arr = [], columns = [], delimiter = ',') {\n  if (arr.some(item => !isPlainObject(item))) {\n    throw new TypeError('数组元素必须是对象');\n  }\n  \n  const header = columns.join(delimiter);\n  const rows = arr.map((obj) =>\n    columns.map((column) => obj[column] ?? '').join(delimiter)\n  );\n  \n  return [header, ...rows].join('\\n').trim();\n}\n"],"names":[],"mappings":";;;AAEA;;;;;;;;;;AAUG;AACa,SAAA,SAAS,CAAC,IAAS,EAAE,SAAe,EAAA;AAA1B,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,EAAA,IAAS,GAAA,EAAA,CAAA,EAAA;AAAE,IAAA,IAAA,SAAA,KAAA,KAAA,CAAA,EAAA,EAAA,SAAe,GAAA,GAAA,CAAA,EAAA;IAClD,IAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;AAC/B,QAAA,IAAA,EAA4B,GAAA,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAA3C,UAAU,GAAA,EAAA,CAAA,CAAA,CAAA,EAAK,QAAQ,cAAoB,CAAC;QACnD,IAAM,QAAM,GAAG,UAAU,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;AAE3C,QAAA,OAAO,QAAQ,CAAC,GAAG,CAAC,UAAC,GAAG,EAAA;YACtB,IAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YACpC,OAAO,QAAM,CAAC,MAAM,CAAC,UAAC,GAAoB,EAAE,KAAK,EAAE,KAAK,EAAA;gBACtD,GAAG,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;AAC3B,gBAAA,OAAO,GAAG,CAAC;aACZ,EAAE,EAAE,CAAC,CAAC;AACT,SAAC,CAAC,CAAC;KACJ;AACD,IAAA,OAAO,EAAE,CAAC;AACZ,CAAC;AAED;;;;;;;;;;;;;AAaG;SACa,SAAS,CAAC,GAAQ,EAAE,OAAY,EAAE,SAAe,EAAA;AAAvC,IAAA,IAAA,GAAA,KAAA,KAAA,CAAA,EAAA,EAAA,GAAQ,GAAA,EAAA,CAAA,EAAA;AAAE,IAAA,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA,EAAA,OAAY,GAAA,EAAA,CAAA,EAAA;AAAE,IAAA,IAAA,SAAA,KAAA,KAAA,CAAA,EAAA,EAAA,SAAe,GAAA,GAAA,CAAA,EAAA;AAC/D,IAAA,IAAI,GAAG,CAAC,IAAI,CAAC,UAAA,IAAI,EAAI,EAAA,OAAA,CAAC,aAAa,CAAC,IAAI,CAAC,GAAA,CAAC,EAAE;AAC1C,QAAA,MAAM,IAAI,SAAS,CAAC,WAAW,CAAC,CAAC;KAClC;IAED,IAAM,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACvC,IAAA,IAAM,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,UAAC,GAAG,EAAA;QACvB,OAAA,OAAO,CAAC,GAAG,CAAC,UAAC,MAAM,EAAA,EAAA,IAAA,EAAA,CAAA,CAAK,OAAA,CAAA,EAAA,GAAA,GAAG,CAAC,MAAM,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAE,CAAA,EAAA,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;AAA1D,KAA0D,CAC3D,CAAC;AAEF,IAAA,OAAO,aAAC,CAAA,CAAA,MAAM,CAAK,EAAA,IAAI,EAAE,IAAA,CAAA,CAAA,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;AAC7C;;;;"}