{"version":3,"file":"array.js","sources":["../../../src/array.ts"],"sourcesContent":["import { isNumber, isPlainObject, isArray } from './common';\n\n/**\n * 数组化, if value is array, return `value`. if value is not array, return `[value]`;\n *\n * ```typescript\n * // eg. 1\n * let value = 1;\n * value = arrayify(value);\n * // now value is `[1]`;\n *\n * // eg. 2\n * let value = [1];\n * value = arrayify(value);\n * // now value is `[1]`;\n * ```\n *\n * @param {Array|any} value\n * @returns  {Array}\n * */\n\nexport function arrayify(value: Array<any> | any): Array<any> {\n  if (isArray(value)) {\n    return value;\n  }\n  return [value];\n}\n\n/**\n * 计算数组元素的平均值;\n *\n * @remark arr element must be number type, not allow string number like '3';\n *\n *\n * ```typescript\n * // eg. 1\n * let average = calculateArrayAverage([]);\n * // now average is `0`;\n *\n * // eg. 2\n * let average = calculateArrayAverage([1, 2, 3, 4, 5]);\n * // now average is `3`;\n *\n * // eg. 3\n * let average = calculateArrayAverage([1, 2, 3, 4, 5, '6', null, undefined, 'a', [], {}]);\n * // now average is `3`;\n * ```\n *\n * @param {Array<number>} arr\n * @param {string} field\n * @returns {number}\n * */\nexport function calculateArrayAverage(arr: Array<number> | Array<any>, field?: string): number {\n  const len = arr.length;\n  if (len === 0) {\n    return 0;\n  }\n\n  const sum = arr.reduce((prev, curr) => {\n    if (isNumber(curr)) {\n      prev += curr;\n    } else if (isPlainObject(curr) && field) {\n      const value = curr[field];\n      if (isNumber(value)) {\n        prev += value;\n      }\n    }\n    return prev;\n  }, 0);\n  return sum / len;\n}\n\n/**\n * 计算数组元素里的最大值；\n *\n * @remark use JavaScript's `Math.max` method; if one element is string number like `'44'`, it regard `'44'` as number 44 and work; But if one element is `'a'` or `undefined` or `object`, you will get `NaN`;\n *\n *\n * ```typescript\n * // eg. 1\n * let maxValue = calculateArrayMaxValue([]);\n * // now maxValue is `0`;\n *\n * // eg. 2\n * let maxValue = calculateArrayMaxValue([1, 2, 3, 4, 5]);\n * // now maxValue is `5`;\n *\n * // eg. 3\n * let maxValue = calculateArrayMaxValue([1, 2, 3, 4, 5, '8', 10]);\n * // now maxValue is `10`;\n *\n * // eg. 4\n * let maxValue = calculateArrayMaxValue([1, 2, 3, 4, 5, 'a', 10]);\n * // now maxValue is `NaN`;\n * ```\n *\n * @param {Array<number>} arr\n * @returns {number}\n * */\n\nexport function calculateArrayMaxValue(arr: Array<any>): number {\n  if (arr.length === 0) {\n    return 0;\n  }\n  return Math.max(...arr);\n}\n\n/**\n * 计算数组元素里的最小值；\n *\n * @remark use JavaScript's `Math.min` method; it's like method `calculateArrayMaxValue` @{link};\n *\n *\n * ```typescript\n * // eg. 1\n * let minValue = calculateArrayMinValue([]);\n * // now minValue is `0`;\n *\n * // eg. 2\n * let minValue = calculateArrayMinValue([1, 2, 3, 4, 5]);\n * // now minValue is `1`;\n *\n * // eg. 3\n * let minValue = calculateArrayMinValue([1, 2, 3, 4, 5, '8', 10]);\n * // now minValue is `1`;\n *\n * // eg. 4\n * let minValue = calculateArrayMinValue([1, 2, 3, 4, 5, 'a', 10]);\n * // now minValue is `NaN`;\n * ```\n *\n * @param {Array<number>} arr\n * @returns {number}\n * */\nexport function calculateArrayMinValue(arr: Array<any>): number {\n  if (arr.length === 0) {\n    return 0;\n  }\n  return Math.min(...arr);\n}\n\n/**\n * 计算数组元素的和；如果是有对象数组，可以传入 field 参数，用 filed 的值来计算；\n *\n * @param arr\n * @param field\n */\nexport function calculateArraySum(arr: Array<number> | Array<any>, field?: string) {\n  if (isArray(arr)) {\n    return arr.reduce((prev, curr) => {\n      if (isNumber(curr)) {\n        prev += curr;\n      } else if (isPlainObject(curr) && field) {\n        const value = curr[field];\n        if (isNumber(value)) {\n          prev += value;\n        }\n      }\n      return prev;\n    }, 0);\n  }\n  return 0;\n}\n\n/**\n * 比较两个数组是否相等；只支持比较基本元素，不支持引用对象元素。\n *\n * @param arr1\n * @param arr2\n */\nexport function compareArray(arr1: Array<any>, arr2: Array<any>) {\n  const len1 = arr1.length;\n  const len2 = arr2.length;\n  if (len1 === len2 && len1 === 0) {\n    return true;\n  }\n\n  if (len1 !== len2) {\n    return false;\n  }\n\n  for (let i = 0; i < len1; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * 计算两个数组的差集\n *\n * @param arr1\n * @param arr2\n */\nexport function differenceSet<T>(arr1: Array<T>, arr2: Array<T>): Array<T> {\n  const set2 = new Set(arr2);\n  const diff = new Set(arr1.filter((k) => !set2.has(k)));\n  return Array.from(diff);\n}\n\n/**\n * 计算两个数组的交集\n *\n * @param arr1\n * @param arr2\n */\nexport function intersection<T>(arr1: Array<T>, arr2: Array<T>): Array<T> {\n  const set2 = new Set(arr2);\n  const result = arr1.filter((k) => set2.has(k));\n  return Array.from(result);\n}\n\n/**\n * 计算两个数组的并集\n *\n * @param arr1\n * @param arr2\n */\nexport function union<T>(arr1: Array<T>, arr2: Array<T>): Array<T> {\n  return Array.from(new Set([...arr1, ...arr2]));\n}\n\n/**\n * 计算数组元素里的重复元素；\n *\n * @param arr\n */\nexport function findDuplicateElements<T>(arr: Array<T>): Array<T> {\n  const result: Array<T> = [];\n  if (arr.length === 0) {\n    return result;\n  }\n\n  const map: Record<any, any> = {};\n\n  const repeatSet = new Set<T>();\n\n  for (let i = 0; i < arr.length; i++) {\n    const item = String(arr[i]);\n    if (map[item]) {\n      repeatSet.add(arr[i]);\n    } else {\n      map[item] = true;\n    }\n  }\n\n  return Array.from(repeatSet);\n}\n\n/**\n * foreach 遍历。内部使用 for 遍历；\n *\n * @param obj\n * @param cb\n */\nexport function foreach(obj: Record<string | number, any>, cb: Function): void {\n  Object.keys(obj).forEach((item, index) => {\n    cb(item, obj[item], index, obj);\n  });\n}\n\n/**\n * 合并两个数组；\n * @param arr1 - 数组1\n * @param arr2 - 数组2\n * @param removeRepetition - 是否移除重复元素\n */\nexport function mergeTwoArray<T>(\n  arr1: Array<T>,\n  arr2: Array<T>,\n  removeRepetition: boolean = false,\n): Array<T> {\n  if (removeRepetition) {\n    return Array.from(new Set([...arr1, ...arr2]));\n  }\n  return [...arr1, ...arr2];\n}\n"],"names":[],"mappings":"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"}