{"version":3,"file":"common.js","sources":["../../common.js"],"sourcesContent":["/* 基础数据类型 */\n/**\n * 检查值是否为布尔类型。\n * @param {any} value - 要检查的值。\n * @returns {boolean} - 如果值是布尔类型则返回 true，否则返回 false。\n */\nfunction isBoolean(value) {\n    return typeof value === 'boolean';\n}\n/**\n * 检查值是否为数字类型。\n * @param {any} value - 要检查的值。\n * @returns {boolean} - 如果值是数字类型则返回 true，否则返回 false。\n */\nfunction isNumber(value) {\n    return typeof value === 'number' && !isNaN(value);\n}\n/**\n * 检查值是否为字符串类型。\n * @param {any} value - 要检查的值。\n * @returns {boolean} - 如果值是字符串类型则返回 true，否则返回 false。\n */\nfunction isString(value) {\n    return typeof value === 'string';\n}\n/**\n * 检查值是否为 undefined。\n * @param {any} value - 要检查的值。\n * @returns {boolean} - 如果值是 undefined 则返回 true，否则返回 false。\n */\nfunction isUndefined(value) {\n    return typeof value === 'undefined';\n}\n/**\n * 检查值是否为 null。\n * @param {any} value - 要检查的值。\n * @returns {boolean} - 如果值是 null 则返回 true，否则返回 false。\n */\nfunction isNull(value) {\n    return value === null;\n}\n/**\n * 检查值是否为 Symbol 类型。\n * @param {any} value - 要检查的值。\n * @returns {boolean} - 如果值是 Symbol 类型则返回 true，否则返回 false。\n */\nfunction isSymbol(value) {\n    return typeof value === 'symbol';\n}\n/**\n * 检查值是否为 NaN。\n * @param {any} value - 要检查的值。\n * @returns {boolean} - 如果值是 NaN 则返回 true，否则返回 false。\n */\nfunction isNaN(value) {\n    return isNumber(value) && value !== +value;\n}\n/**\n * 检查值是否为整数。\n * @param {any} value - 要检查的值。\n * @returns {boolean} - 如果值是整数则返回 true，否则返回 false。\n */\nfunction isInt(value) {\n    return isNumber(value) && Number.isInteger(value);\n}\n/**\n * 检查值是否为偶数。\n * @param {any} value - 要检查的值。\n * @returns {boolean} - 如果值是偶数则返回 true，否则返回 false。\n */\nfunction isEven(value) {\n    return isNumber(value) && value % 2 === 0;\n}\n/**\n * 检查值是否为奇数。\n * @param {any} value - 要检查的值。\n * @returns {boolean} - 如果值是奇数则返回 true，否则返回 false。\n */\nfunction isOdd(value) {\n    return isNumber(value) && value % 2 === 1;\n}\n/**\n * 检查值是否为正数。\n * @param {any} value - 要检查的值。\n * @returns {boolean} - 如果值是正数则返回 true，否则返回 false。\n */\nfunction isPositiveNumber(value) {\n    return isNumber(value) && value > 0;\n}\n/**\n * 检查值是否为负数。\n * @param {any} value - 要检查的值。\n * @returns {boolean} - 如果值是负数则返回 true，否则返回 false。\n */\nfunction isNegativeNumber(value) {\n    return isNumber(value) && value < 0;\n}\n/**\n * 检查值是否为基本数据类型。\n * @param {any} value - 要检查的值。\n * @returns {boolean} - 如果值是基本数据类型则返回 true，否则返回 false。\n */\nfunction isBaseType(value) {\n    var methods = [isNumber, isString, isBoolean, isUndefined, isNull, isSymbol];\n    return methods.some(function (method) { return method(value); });\n}\n/* 其他数据类型 */\n/**\n * 检查值是否为 Map 类型。\n * @param {any} value - 要检查的值。\n * @returns {boolean} - 如果值是 Map 类型则返回 true，否则返回 false。\n */\nfunction isMap(value) {\n    return Object.prototype.toString.call(value) === '[object Map]';\n}\n/**\n * 检查值是否为 WeakMap 类型。\n * @param {any} value - 要检查的值。\n * @returns {boolean} - 如果值是 WeakMap 类型则返回 true，否则返回 false。\n */\nfunction isWeakMap(value) {\n    return Object.prototype.toString.call(value) === '[object WeakMap]';\n}\n/**\n * 检查值是否为 Set 类型。\n * @param {any} value - 要检查的值。\n * @returns {boolean} - 如果值是 Set 类型则返回 true，否则返回 false。\n */\nfunction isSet(value) {\n    return Object.prototype.toString.call(value) === '[object Set]';\n}\n/**\n * 检查值是否为 WeakSet 类型。\n * @param {any} value - 要检查的值。\n * @returns {boolean} - 如果值是 WeakSet 类型则返回 true，否则返回 false。\n */\nfunction isWeakSet(value) {\n    return Object.prototype.toString.call(value) === '[object WeakSet]';\n}\n/**\n * 检查值是否为数组。\n * @param {any} value - 要检查的值。\n * @returns {boolean} - 如果值是数组则返回 true，否则返回 false。\n */\nfunction isArray(value) {\n    return Array.isArray(value);\n}\n/**\n * 检查数组是否为空。\n * @param {any} value - 要检查的值。\n * @returns {boolean} - 如果值是空数组则返回 true，否则返回 false。\n */\nfunction isEmptyArray(value) {\n    return isArray(value) && value.length === 0;\n}\n/**\n * 检查值是否为普通对象。\n * @param {any} value - 要检查的值。\n * @returns {boolean} - 如果值是普通对象则返回 true，否则返回 false。\n */\nfunction isPlainObject(value) {\n    return Object.prototype.toString.call(value) === '[object Object]' && value !== null;\n}\n/**\n * 检查对象是否为空。\n * @param {any} value - 要检查的值。\n * @returns {boolean} - 如果值是空对象则返回 true，否则返回 false。\n */\nfunction isEmptyObject(value) {\n    return isPlainObject(value) && Object.keys(value).length === 0;\n}\n/**\n * 检查值是否为对象（包括文件、日期、函数、正则等）。\n * @param {any} value - 要检查的值。\n * @returns {boolean} - 如果值是对象则返回 true，否则返回 false。\n */\nfunction isObject(value) {\n    return value !== null && typeof value === 'object';\n}\n/**\n * 检查值是否为日期类型。\n * @param {any} value - 要检查的值。\n * @returns {boolean} - 如果值是日期类型则返回 true，否则返回 false。\n */\nfunction isDate(value) {\n    return Object.prototype.toString.call(value) === '[object Date]';\n}\n/**\n * 检查值是否为函数。\n * @param {any} value - 要检查的值。\n * @returns {boolean} - 如果值是函数则返回 true，否则返回 false。\n */\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\n/**\n * 检查值是否为有效日期。\n * @param {any} value - 要检查的值。\n * @returns {boolean} - 如果值是有效日期则返回 true，否则返回 false。\n */\nfunction isValidDate(value) {\n    return !isNaN(Date.parse(value));\n}\n/**\n * 检查值是否为错误对象。\n * @param {any} value - 要检查的值。\n * @returns {boolean} - 如果值是错误对象则返回 true，否则返回 false。\n */\nfunction isError(value) {\n    return Object.prototype.toString.call(value) === '[object Error]';\n}\n/**\n * 检查值是否为 HTML 元素。\n * @param {any} element - 要检查的值。\n * @returns {boolean} - 如果值是 HTML 元素则返回 true，否则返回 false。\n */\nfunction isHTMLElement(element) {\n    return element instanceof HTMLElement;\n}\n/**\n * 检查当前环境是否为浏览器。\n * @returns {boolean} - 如果当前环境为浏览器则返回 true，否则返回 false。\n */\nfunction isBrowser() {\n    return typeof window === 'object' && typeof document === 'object' && document.nodeType === 9;\n}\n/**\n * 检查当前环境是否为 Node.js。\n * @returns {boolean} - 如果当前环境为 Node.js 则返回 true，否则返回 false。\n */\nfunction isNode() {\n    return typeof process === 'object' && Object.prototype.toString.call(process) === '[object process]';\n}\n/**\n * 检查年份是否为闰年。\n * @param {number} year - 要检查的年份。\n * @returns {boolean} - 如果年份是闰年则返回 true，否则返回 false。\n */\nfunction isLeapYear(year) {\n    if (!isNumber(year)) {\n        return false;\n    }\n    return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\nvar ua = window.navigator.userAgent;\n/**\n * 当前环境信息映射。\n */\nvar envMap = {\n    isPC: !ua.includes('Android') && !ua.includes('iPhone'),\n    isMobile: ua.includes('Android') || ua.includes('iPhone'),\n    isAndroid: ua.includes('Android'),\n    isIPhone: ua.includes('iPhone'),\n    isIPad: ua.includes('iPad'),\n};\n\nexport { envMap, isArray, isBaseType, isBoolean, isBrowser, isDate, isEmptyArray, isEmptyObject, isError, isEven, isFunction, isHTMLElement, isInt, isLeapYear, isMap, isNaN, isNegativeNumber, isNode, isNull, isNumber, isObject, isOdd, isPlainObject, isPositiveNumber, isSet, isString, isSymbol, isUndefined, isValidDate, isWeakMap, isWeakSet };\n//# sourceMappingURL=common.js.map\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAsJA;AACA;AACA;AACA;AACA;AACA,SAAS,aAAa,CAAC,KAAK,EAAE;AAC9B,IAAI,OAAO,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,iBAAiB,IAAI,KAAK,KAAK,IAAI,CAAC;AACzF,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,SAAS,aAAa,CAAC,KAAK,EAAE;AAC9B,IAAI,OAAO,aAAa,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;AACnE,CAAC;AA0ED,IAAI,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC;AACpC;AACA;AACA;CACa;AACb,IAAI,IAAI,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC;AAC3D,IAAI,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC;AAC7D,IAAI,SAAS,EAAE,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC;AACrC,IAAI,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC;AACnC,IAAI,MAAM,EAAE,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC;AAC/B;;;;"}